#include <iostream>
#include <string>
using namespace std;

class Person {
protected:
    int id;
    string name;
    string password;
public:

    //==>>setters<<==
    virtual void  setName(string name) = 0;
    virtual void  setId(int id) = 0;
    virtual void setPassword(string password) = 0;
    //==>>getters<<==
    virtual int getId() = 0;
    virtual string getName() = 0;
    virtual string getPassword() = 0;
    //====>>methods<<====
    virtual void displayInfo() = 0;
};
//****************
class Employee :public Person {
protected:
    double salary;
public:
    Employee() {
        id = 0;
        salary = 0;
    }
    Employee(int id, string name, string password,int salary) {
        this->name = name;
        this->id = id;
        this->password = password;
        this->salary = salary;
    }

    void  setName(string name) {

        if (name.size() >= 5 && name.size() <= 20)
        {
            this->name = name;
           // cout << "name accepted" << endl;
        }
        else
        {
            cout << "name min size is 5 and max size is 20" << endl;
        }
    }
    void  setId(int id) {
        this->id = id;
    }
    void setPassword(string password) {
        if (password.size() >= 8 && password.size() <= 20)
        {
            this->password = password;
           // cout << "password accepted " << endl;
        }
        else
        {
            cout << "min size must be 8 and max size 20 ";
        }
    }
    void  setSalary(double salary) {

        if (salary < 5000)
            cout << "min salary must be 5000" << endl;
        else {
            this->salary = salary;
           // cout << "salary accepted" << endl;
        }
    }
        //==>>getters<<==
        int getId() {
            return id;
        }
        string getName() {
            return name;
        }
        string getPassword() {
            return password;
        }
        double getSalary() {
            return salary;
        }
        //====>>methods<<====
        void displayInfo() {
            cout << "name is: " << name<<endl;
            cout << "id is: " << id << endl;
            cout << "password is: " << password << endl;
            cout << "salary is: " << salary << endl;
        }
};
//****************
class Admin : public Employee {
private:
    Employee arr[1000] = {};
    int static  counter;

    static Admin* one_and_only_instance;
    static int unique_id;
    Admin(const int num) {
        unique_id = num;
    }

    
public:
    static Admin* get_instance(const int num) {
        if (one_and_only_instance == nullptr) {
            std::cout << "creating a new instance" << std::endl;
            one_and_only_instance = new Admin(num);
        }
        std::cout << "returning instance with unique id: " << unique_id << std::endl;
        return one_and_only_instance;
    }

    void operator=(const Admin&) = delete;
    Admin(Admin& other) = delete;

    void PrintUniqueID() {
        std::cout << "Current Instance's unique id: " << this->unique_id << std::endl;
    }

  
    //////////////////////////////////////////////////////////////////////////
    void addNewEmployee(int id, string name, string password) {
        Employee* e = new Employee();
        e->setId(id);
        e->setName(name);
        e->setPassword(password);
        arr[counter] = *e;
        counter++;
    }
    void addEmployee(Employee e) {
        arr[counter] = e;
        counter++;
    }
    void editEmployee(Employee& e, int id, string name, string password) {
        e.setId(id);
        e.setName(name);
        e.setPassword(password);
    }
    void editEmployee(Employee& e, int id) {
        e.setId(id);
    }
    void editEmployee(Employee& e, string name) {
        e.setName(name);
    }
    void getAllEmployees() {
        for (int i = 0; i < counter; i++)
        {
            cout << arr[i].getName() << endl;
        }
    }
};
//****************
Admin* Admin::one_and_only_instance = nullptr;
int Admin::unique_id = 0;
int Admin::counter = 0;
//*